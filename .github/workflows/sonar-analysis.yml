name: SonarQube Cloud

on:
  workflow_call:
    inputs:
      dotnet_version:
        description: '.NET version to use'
        required: true
        type: string

env:
    SONAR_TOKEN: ${{ secrets.sonar_token }}
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  sonar:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ inputs.dotnet_version }}

    - name: Cache SonarCloud packages
      uses: actions/cache@v1
      with:
        path: ~\sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Cache SonarCloud packages
      uses: actions/cache@v1
      with:
        path: ~\sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Cache SonarCloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v1
      with:
        path: .\.sonar\scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner

    - name: Install SonarCloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      run: dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner

    - name: Install project dependencies
      run: dotnet restore src/UniLx.sln

    - name: Test and analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.sonar_token }}
      run: |
        ./.sonar/scanner/dotnet-sonarscanner begin /k:"AndrePostiga_cs" /o:"andrepostiga" /d:sonar.token="${{ secrets.sonar_token }}" /d:sonar.host.url="https://sonarcloud.io"
        dotnet build src/UniLx.ApiService/UniLx.ApiService.csproj
        dotnet test src/UniLx.Tests/UniLx.Tests.csproj --no-build --verbosity normal \
          /p:CollectCoverage=true \
          /p:CoverletOutput=TestResults/coverage.opencover.xml \
          /p:CoverletOutputFormat=opencover -l trx
        ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

    - name: Build
      run: dotnet build --configuration Release --no-restore


    # - name: Install Sonar Scanner
    #   run: dotnet tool install --global dotnet-sonarscanner
    
    # - name: Install Coverlet Console
    #   run: dotnet tool install --global dotnet-sonarscanner

    # - name: Download a single artifact
    #   uses: actions/download-artifact@v4
    #   with:
    #    name: test-results        

    # - name: Run SonarQube Analysis
    #   env:
    #     SONAR_TOKEN: ${{ secrets.sonar_token }}
    #   run: |
    #     dotnet sonarscanner begin \
    #       /k:"AndrePostiga_cs-UniLx" \
    #       /o:"andrepostiga" \
    #       /d:sonar.host.url="https://sonarcloud.io" \
    #       /d:sonar.token=${{ secrets.SONAR_TOKEN  }} \
    #       /d:sonar.cs.opencover.reportsPaths=coverage.cobertura.xml
    #     dotnet build src/UniLx.ApiService/UniLx.ApiService.csproj
    #     dotnet sonarscanner end /d:sonar.login=${{ secrets.SONAR_TOKEN }}